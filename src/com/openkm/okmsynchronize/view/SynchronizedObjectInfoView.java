/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.openkm.okmsynchronize.view;

import com.openkm.okmsynchronize.model.StateSynchronizeObject;
import com.openkm.okmsynchronize.model.SynchronizedObject;
import com.openkm.okmsynchronize.view.utils.SpringUtilities;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import javax.swing.JLabel;
import javax.swing.SpringLayout;

/**
 *
 * @author abujosa
 */
public class SynchronizedObjectInfoView extends javax.swing.JDialog {

    /**
     * Creates new form SynchronizedObjectInfo
     */
    public SynchronizedObjectInfoView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();                
    }
    
    /**
     * Creates new form SynchronizedObjectInfo
     */
    public SynchronizedObjectInfoView(java.awt.Frame parent, boolean modal, SynchronizedObject model) {
        super(parent, modal);
        
        this.model = model;
        
        initComponents();
        
        jPanel2.setLayout(new SpringLayout());
        {
            String[] labels = {"Name:", "uuid:", "Type:", "Repository path:", "OpenKM path:", "Repository last modified:", "OpenKM last modified:", "OpenKM version:", "State:", "Description:"};
            int numPairs = labels.length;
            for (int i = 0; i < numPairs; i++) {
                JLabel label = new JLabel(labels[i], JLabel.LEFT);
                JLabel linfo = new JLabel("", JLabel.LEFT);
                
                if ("Name:".equals(labels[i])) { linfo.setText(model.getName()); }                    
                else if("uuid:".equals(labels[i])) { linfo.setText(model.getUuid()); }
                else if("Type:".equals(labels[i])) { linfo.setText(model.isFolder()? "folder" : "document"); }
                else if("Repository path:".equals(labels[i])) { linfo.setText(model.getRelativePath()); }
                else if("OpenKM path:".equals(labels[i])) { linfo.setText(model.getServerPath()); }
                else if("Repository last modified:".equals(labels[i])) { linfo.setText(model.getLocalTime() != null? new SimpleDateFormat("dd/MM/yyyy HH:mm").format(model.getLocalTime()) : ""); }
                else if("OpenKM last modified:".equals(labels[i])) { linfo.setText(model.getServerTime() != null? new SimpleDateFormat("dd/MM/yyyy HH:mm").format(model.getServerTime()) : ""); }
                else if("OpenKM version:".equals(labels[i])) { linfo.setText(model.getVersion()); }
                else if("State:".equals(labels[i])) { linfo.setText(model.getState().getDescription()); }         
                else if("Description:".equals(labels[i])) { linfo.setText(model.getConflictMessage()); }    
                
                if(!"Description:".equals(labels[i]) || ("Description:".equals(labels[i]) && StateSynchronizeObject.CONFLICT.equals(model.getState()))) {
                    label.setVisible(true);
                    linfo.setVisible(true);
                } else {
                    label.setVisible(false);
                    linfo.setVisible(false);
                }
                
                jPanel2.add(label);
                jPanel2.add(linfo);
            }
            SpringUtilities.makeCompactGrid(jPanel2,
                    numPairs, 2, //rows, cols
                    6, 6, //initX, initY
                    6, 6);       //xPad, yPad
        }        
    }
    
    public void addButtonCloseListener(ActionListener l) { buttonClose.addActionListener(l); }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Information");
        setMinimumSize(new java.awt.Dimension(800, 300));

        jPanel1.setMinimumSize(new java.awt.Dimension(50, 50));

        buttonClose.setText("Close");
        jPanel1.add(buttonClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 761, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SynchronizedObjectInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SynchronizedObjectInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SynchronizedObjectInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SynchronizedObjectInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SynchronizedObjectInfoView dialog = new SynchronizedObjectInfoView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private SynchronizedObject model;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
